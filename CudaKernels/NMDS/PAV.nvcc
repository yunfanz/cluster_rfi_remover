/*
####################################################################################################################################################
#Copyright (c) 2013, Josiah Walker
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or #other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED #WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY #DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS #OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING #NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################################################################################
*/

//GPU implementation of Pool Adjacent Violators algorithm
//implemented from the paper "An Approach To Parallelizing Isotonic Regression" - Anthony Kearns
//requires the following defines: 
//CHUNK_SIZE
//TOTAL_THREADS
//STEP_SIZE (ie ceil(CHUNK_SIZE/TOTAL_THREADS))
//DATA_LENGTH
//ALPHA
//memory complexity = 2*4*CHUNK_SIZE + 10*4*TOTAL_THREADS

//implement a pass of PAV at point i
__device__ unsigned int PAVstep (const unsigned int i, const unsigned int stepSize, float* isoChunk, const unsigned int limit) {
    unsigned int newi = i;
    //const unsigned int limit = min((threadIdx.x+1)*stepSize,CHUNK_SIZE);
    
    if (isoChunk[i] > isoChunk[i+1]) { //if we have a non-monotonic section, do PAV
        unsigned int mini = i;
        unsigned int maxi = i+2;
        float size = 2.;
        float sum = isoChunk[i]+isoChunk[i+1];
        
        for (unsigned int k = 0; k < 7; ++k) {
            //expand right:
            while (maxi < limit and isoChunk[maxi]*size < sum) {
                sum += isoChunk[maxi];
                ++maxi;
                size += 1.;
            }
            //expand left:
            while (mini > 0 and isoChunk[mini-1]*size > sum) {
                --mini;
                sum += isoChunk[mini];
                size += 1.;
            }
        }
        sum /= size;
        for (unsigned int j = mini; j < maxi; ++j) {
            isoChunk[j] = sum;
        }
        
        //jump to the end of the isotone
        newi = maxi-2;
    }
    return newi;
}

//implement a pass of PAV at point i
__device__ unsigned int PAVjoin (const unsigned int i, const unsigned int stepSize, float* isoChunk) {
    unsigned int newi = i;
    const unsigned int limit = min((threadIdx.x+1)*stepSize,CHUNK_SIZE);
    
    if (isoChunk[i] > isoChunk[i+1]) { //if we have a non-monotonic section, do PAV
        unsigned int mini = i;
        unsigned int maxi = i+2;
        float size = 2.;
        float sum = isoChunk[i]+isoChunk[i+1];
        
        for (unsigned int k = 0; k < 10; ++k) {
            //expand right:
            //start with a binary search: (we know the subcomponents are monotonic)
            unsigned int j = (limit-maxi+1)/2;
            unsigned int old = maxi;
            while (j > 0) {
                while (j > 0 and isoChunk[maxi]*size < sum) {
                    //sum += isoChunk[offset+maxi];
                    maxi += j;
                    j /= 2;
                }
                while (j > 0 and isoChunk[maxi]*size > sum) {
                    //sum += isoChunk[offset+maxi];
                    maxi -= j;
                    j /= 2;
                }
            }
            if (isoChunk[maxi]*size > sum) {
                --maxi;
            }
            for (unsigned int j = old; j < maxi; ++j) {
                sum += isoChunk[j];
            }
            size += maxi-old;
            
            //expand left:
            j = (mini+1)/2;
            old = mini;
            while (j > 0) {
                while (j > 0 and isoChunk[mini]*size > sum) {
                    mini -= j;
                    j /= 2;
                }
                while (j > 0 and isoChunk[mini]*size < sum) {
                    mini += j;
                    j /= 2;
                }
            }
            if (isoChunk[mini]*size < sum) {
                ++mini;
            }
            for (unsigned int j = mini; j < old; ++j) {
                sum += isoChunk[j];
            }
            size += old-mini;
            
        }
        
        
        
        //jump to the end of the isotone
        newi = maxi-2;
    }
    return newi;
}

__global__ void PAV(float* isoChunk) {
    const unsigned int v = threadIdx.x;
    unsigned int stepSize = STEP_SIZE;
    
    //FIRST STEP: check every single pair for isotones
    unsigned int offset = v*stepSize;
    unsigned int limit = min((v+1)*stepSize,CHUNK_SIZE);
    
    for (unsigned int i = offset; i < limit-1; ++i) {
        i = PAVstep(i,stepSize,isoChunk,limit);
    }
    __syncthreads();
    
    //SECOND STEP: recursively check dataset joins (log time parallel algorithm)
    while (stepSize < CHUNK_SIZE) { //only run our thread while it is useful
        stepSize *= 2;
        if (CHUNK_SIZE > v*stepSize+stepSize/2) {
            PAVjoin(stepSize/2-1,stepSize,isoChunk); //we are doing updates on isoChunk only now
        }
        __syncthreads(); //sync all our data before doing the next update
    }
    //THIRD STEP: convert into scaled deltas to multiply our vector directions by now done by the SCALE kernel
    /*for (unsigned int i = 0; i < limit; ++i) {
        isoChunk[offset+i] = (ALPHA/(DATA_LENGTH-1.0))*(1.-isoChunk[offset+i]/distChunk[offset+i]);
    }*/
}

