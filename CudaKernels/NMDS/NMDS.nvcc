/*
####################################################################################################################################################
#Copyright (c) 2013, Josiah Walker
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or #other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED #WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY #DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS #OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING #NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################################################################################
*/

//GPU implementation of NMDS update rule (using scaled isotonic differences)

__global__ void NMDS(const unsigned int* Rank, const float* distChunk, float* Deltas, 
                     const unsigned int* reorderedPts, const unsigned int* startPts, 
                     const long chunkSize, const long dims, const long dataSize, const float scale, const float rescale) { //, const long global_offset) {
    const unsigned int v = threadIdx.x+blockIdx.x*1024+blockIdx.y*1024*65536;
    const unsigned int v2 = v+dataSize;
    if (v < dataSize) {
        for (unsigned int i = startPts[v]; i < startPts[v+1]; ++i) {
            const unsigned int pos = Rank[reorderedPts[i]*2]*dims;
            const unsigned int pos2 = Rank[reorderedPts[i]*2+1]*dims;
            const float scaled = scale*(1.-rescale*distChunk[reorderedPts[i]]);
            for (unsigned int j = 0; j < dims; ++j) {
                Deltas[pos+j] -= scaled*(Deltas[pos+j]-Deltas[pos2+j]);
            }
        }
        for (unsigned int i = startPts[v2]; i < startPts[v2+1]; ++i) {
            const unsigned int pos = Rank[reorderedPts[i]*2]*dims;
            const unsigned int pos2 = Rank[reorderedPts[i]*2+1]*dims;
            const float scaled = scale*(1.-rescale*distChunk[reorderedPts[i]]);
            for (unsigned int j = 0; j < dims; ++j) {
                Deltas[pos2+j] += scaled*(Deltas[pos+j]-Deltas[pos2+j]);
            }
        }
    }
}
    

