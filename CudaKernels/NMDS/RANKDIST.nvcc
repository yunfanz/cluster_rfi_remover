/*
####################################################################################################################################################
#Copyright (c) 2013, Josiah Walker
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or #other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED #WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY #DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS #OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING #NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################################################################################
*/

//GPU implementation distance calculations for the rank matrix
//requires the following defines: 
//CHUNK_SIZE
//TOTAL_THREADS
//STEP_SIZE (ie ceil(CHUNK_SIZE/TOTAL_THREADS))
//DATA_DIMS
//memory complexity = 3*4*CHUNK_SIZE + 6*4*TOTAL_THREADS + DATA_DIMS*DATA_SIZE + 8

__global__ void RankDist(const unsigned int* Rank, const float* Coords, float* distChunk, float* threadSums, const long chunkSize, const long dims) {
    double sum = 0.0;
    const unsigned int v = threadIdx.x;
    const unsigned int offset = v*STEP_SIZE;
    const unsigned int limit = min((v+1)*STEP_SIZE,(unsigned int)chunkSize);
    for (unsigned int i = offset; i < limit; ++i) {
        //calculate distance
        const unsigned int pos = Rank[i*2]*dims;
        const unsigned int pos2 = Rank[i*2+1]*dims;
        float d = 0.0;
        for (unsigned int j = 0; j < dims; ++j) {
            d += (Coords[pos+j]-Coords[pos2+j])*
                 (Coords[pos+j]-Coords[pos2+j]);
        }
        sum += distChunk[i] = sqrt(d);
    }
    //have a separate sum vector so we can normalize easily
    threadSums[v] += (sum/DATA_LENGTH);
}
