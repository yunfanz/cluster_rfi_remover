/* K nearest Neighbours Kernel for large datasets ( backported from the improved version at http://github.com/TrentHouliston/Isomaped )
####################################################################################################################################################
#Copyright (c) 2013, Josiah Walker and Trent Houliston
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or #other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED #WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY #DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS #OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING #NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####################################################################################################################################################
*/

/**
* This kernel extracts the k nearest neighbours from the distance heap (which is the nearest power of 2 above k).
* A count is also made of the total number of neighbours needing processing for KNN symmetry.
*
*
* @param indices The indexes to the nearest k neighbours (matches with distances)
* @param distances The distances to our nearest k neighbours (matches with indices)
* @param kMax The number of nodes to include in our K nearest
* @param dataSize The total number of data elements we are processing (for bounds checking)
* @param chunkSize The size of our chunks (for bounds checking)
*
* @author Josiah Walker
* @author Trent Houliston
*/
#define MAXBLOCKS 65536 //this will probably never get used, but in the event that we are over 10 million objects it helps.


__device__ unsigned int heapInsertFloat (unsigned int* heapDataI, float* heapDataF, const unsigned int heapInsertI, const float heapInsertF) {
    unsigned int index = (heapInsertF < heapDataF[0]); //if d < root, move to the next node to check
    
    const bool inserted = index != 0; //check if we insert at all
    
    while (index < MAXKMAX and (heapDataF[index] > heapInsertF or heapDataF[index+1] > heapInsertF)) { //walk the bheap
        
        //get the index of the new largest leaf
        const unsigned int newIndex = index+(heapDataF[index]<heapDataF[index+1]);
        
        //shift the leaf up
        heapDataF[index/2] = heapDataF[newIndex];
        heapDataI[index/2] = heapDataI[newIndex];
        
        //increment the target index
        index = 2*newIndex+1;
    }
    if (inserted) { //copy in the final values
        heapDataF[index/2] = heapInsertF;
        heapDataI[index/2] = heapInsertI;
    }
    return index; //return 2*index+1 we inserted at; 0 = not inserted
}

//NOTE: major problem with sorting by uint: we can't insert negatives - so make sure this is used with longs
__device__ unsigned int heapInsertInt (long* heapDataI, float* heapDataF, const long heapInsertI, const float heapInsertF) {
    unsigned int index = (heapInsertI < heapDataI[0]); //if d < root, move to the next node to check
    
    const bool inserted = index != 0; //check if we insert at all
    
    while (index < MAXKMAX and (heapDataI[index] > heapInsertI or heapDataI[index+1] > heapInsertI)) { //walk the bheap
        
        //get the index of the new largest leaf
        const unsigned int newIndex = index+(heapDataI[index]<heapDataI[index+1]);
        
        //shift the leaf up
        heapDataF[index/2] = heapDataF[newIndex];
        heapDataI[index/2] = heapDataI[newIndex];
        
        //increment the target index
        index = 2*newIndex+1;
    }
    if (inserted) { //copy in the final values
        heapDataF[index/2] = heapInsertF;
        heapDataI[index/2] = heapInsertI;
    }
    return index; //return 2*index+1 we inserted at; 0 = not inserted
}


__global__ void KNNSORT(float* knn,
                    unsigned int* indices,
                    const long kMax,
                    const long dataSize, //use longs instead of uints because numpy doesn't support single value uint32
                    const long chunkSize,
                    const long sourceOffset) {
    
    const unsigned int elementIndex = (threadIdx.x+blockIdx.x*1024+blockIdx.y*1024*MAXBLOCKS);
    const unsigned int sourceLimit = min((unsigned int)(chunkSize+sourceOffset),(unsigned int)dataSize)-sourceOffset;
    const unsigned int offset = elementIndex*MAXKMAX;
    
    //make local memory arrays
    float knnD[MAXKMAX];
    unsigned int knnI[MAXKMAX];
    
    if (elementIndex < sourceLimit) {
        
        for (unsigned int i = 0; i < MAXKMAX; ++i) { //Prefill the KNN heap from main memory
            knnD[i] = knn[offset + i];
            knnI[i] = indices[offset + i];
        }
        
        //remove excess k
        for (unsigned int i = 0; i < MAXKMAX-kMax-1; ++i) {
            heapInsertFloat(knnI,knnD,0,-1.);
        }
        
        //put real values back into knn
        for (unsigned int i = 0; i < kMax; ++i) {
            knn[offset + i] = knnD[0];
            indices[offset+i] = knnI[0];
            heapInsertFloat(knnI,knnD,0,-1.);
        }
    }
}
